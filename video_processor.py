import os
import subprocess
import glob
import math
import json
import argparse
from pathlib import Path
from typing import List, Tuple
import time

class VideoProcessor:
    def __init__(self, input_folder: str = "input_vdo", output_folder: str = "output_vdo"):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á VideoProcessor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        
        Args:
            input_folder: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            output_folder: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        """
        self.input_folder = input_folder
        self.output_folder = output_folder
        self.video_extensions = ['*.mp4', '*.avi', '*.mov', '*.mkv', '*.wmv', '*.flv', '*.webm', '*.m4v']
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
        Path(self.output_folder).mkdir(exist_ok=True)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ ffmpeg ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        self._check_ffmpeg()
    
    def _check_ffmpeg(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ FFmpeg ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
            subprocess.run(['ffprobe', '-version'], capture_output=True, check=True)
            print("‚úì FFmpeg ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö FFmpeg ‡∏´‡∏£‡∏∑‡∏≠ FFprobe")
            print("üì• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á FFmpeg ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            print("üîó ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å: https://ffmpeg.org/download.html")
            raise SystemExit("FFmpeg ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    def get_video_files(self) -> List[str]:
        """‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå input"""
        video_files = []
        for extension in self.video_extensions:
            pattern = os.path.join(self.input_folder, extension)
            video_files.extend(glob.glob(pattern))
        return sorted(video_files)
    
    def get_video_info(self, video_path: str) -> dict:
        """‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß, bitrate, ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå)"""
        try:
            # ‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            duration_cmd = [
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
                '-of', 'default=noprint_wrappers=1:nokey=1', video_path
            ]
            duration_result = subprocess.run(duration_cmd, capture_output=True, text=True, check=True)
            duration = float(duration_result.stdout.strip()) if duration_result.stdout.strip() else 0
            
            # ‡∏´‡∏≤ bitrate
            bitrate_cmd = [
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=bit_rate',
                '-of', 'default=noprint_wrappers=1:nokey=1', video_path
            ]
            bitrate_result = subprocess.run(bitrate_cmd, capture_output=True, text=True)
            bitrate = int(bitrate_result.stdout.strip()) if bitrate_result.stdout.strip() else 0
            
            # ‡∏´‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
            file_size = os.path.getsize(video_path)
            file_size_mb = file_size / (1024 * 1024)
            
            return {
                'duration': duration,
                'bitrate': bitrate,
                'file_size_bytes': file_size,
                'file_size_mb': file_size_mb
            }
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå {video_path}: {e}")
            return {'duration': 0, 'bitrate': 0, 'file_size_bytes': 0, 'file_size_mb': 0}
    
    def calculate_target_bitrate(self, duration_seconds: float, max_size_mb: float) -> int:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bitrate ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        if duration_seconds <= 0:
            return 1000000  # default 1Mbps
        
        # ‡πÅ‡∏õ‡∏•‡∏á MB ‡πÄ‡∏õ‡πá‡∏ô bits ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bitrate
        max_size_bits = max_size_mb * 8 * 1024 * 1024
        target_bitrate = int(max_size_bits / duration_seconds)
        
        # ‡∏•‡∏î 25% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö audio ‡πÅ‡∏•‡∏∞ overhead)
        return max(int(target_bitrate * 0.75), 100000)  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≥ 100kbps
    
    def format_time(self, seconds: float) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        return f"{hours:02d}:{minutes:02d}:{secs:02d}"
    
    def split_and_compress_video(self, video_path: str, segment_duration: int, max_size_mb: float, 
                               quality_preset: str = "medium") -> bool:
        """
        ‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        
        Args:
            video_path: ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            segment_duration: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            max_size_mb: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô MB
            quality_preset: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (ultrafast, fast, medium, slow, veryslow)
        """
        video_name = Path(video_path).stem
        video_info = self.get_video_info(video_path)
        total_duration = video_info['duration']
        
        if total_duration == 0:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå {video_path} - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
            return False
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î
        num_segments = math.ceil(total_duration / segment_duration)
        
        print(f"\nüìπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {video_name}")
        print(f"‚è±Ô∏è  ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ß‡∏°: {self.format_time(total_duration)} ({total_duration:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        print(f"üìÅ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {video_info['file_size_mb']:.1f} MB")
        print(f"‚úÇÔ∏è  ‡∏à‡∏∞‡∏ï‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô {num_segments} ‡∏™‡πà‡∏ß‡∏ô (‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏∞ {segment_duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        print(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {max_size_mb} MB ‡∏ï‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå")
        print("-" * 60)
        
        success_count = 0
        
        for i in range(num_segments):
            start_time = i * segment_duration
            actual_duration = min(segment_duration, total_duration - start_time)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bitrate ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            target_bitrate = self.calculate_target_bitrate(actual_duration, max_size_mb)
            
            output_filename = f"{video_name}_part{i+1:03d}.mp4"
            output_path = os.path.join(self.output_folder, output_filename)
            
            print(f"üîÑ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {i+1}/{num_segments}: {output_filename}")
            print(f"   ‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤: {self.format_time(start_time)} - {self.format_time(start_time + actual_duration)}")
            print(f"   üìä Target Bitrate: {target_bitrate//1000}k")
            
            # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ffmpeg
            cmd = [
                'ffmpeg', '-y',  # -y ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                '-i', video_path,
                '-ss', str(start_time),
                '-t', str(actual_duration),
                '-c:v', 'libx264',  # ‡πÉ‡∏ä‡πâ codec H.264
                '-b:v', f"{target_bitrate}",  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î video bitrate
                '-maxrate', f"{target_bitrate}",  # bitrate ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                '-bufsize', f"{target_bitrate * 2}",  # buffer size
                '-c:a', 'aac',  # ‡πÉ‡∏ä‡πâ AAC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                '-b:a', '128k',  # audio bitrate 128k
                '-preset', quality_preset,  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
                '-movflags', '+faststart',  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö
                output_path
            ]
            
            try:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                start_time_process = time.time()
                result = subprocess.run(cmd, check=True, capture_output=True, text=True)
                process_time = time.time() - start_time_process
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
                if os.path.exists(output_path):
                    file_size_mb = os.path.getsize(output_path) / (1024 * 1024)
                    compression_ratio = (video_info['file_size_mb'] / num_segments) / file_size_mb if file_size_mb > 0 else 0
                    
                    print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡∏ô‡∏≤‡∏î: {file_size_mb:.1f} MB")
                    print(f"   ‚ö° ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {process_time:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                    print(f"   üìâ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î: {compression_ratio:.1f}x")
                    
                    if file_size_mb > max_size_mb * 1.1:  # ‡πÉ‡∏´‡πâ tolerance 10%
                        print(f"   ‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ({max_size_mb} MB)")
                    
                    success_count += 1
                else:
                    print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå output")
                    
            except subprocess.CalledProcessError as e:
                print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {i+1}")
                error_output = e.stderr.decode() if e.stderr else str(e)
                print(f"   üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {error_output[:200]}...")
            
            print()
        
        success_rate = (success_count / num_segments) * 100
        print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {video_name}:")
        print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{num_segments} ‡∏™‡πà‡∏ß‡∏ô ({success_rate:.1f}%)")
        
        return success_count == num_segments
    
    def process_all_videos(self, segment_duration: int = 300, max_size_mb: float = 25, 
                          quality_preset: str = "medium") -> dict:
        """
        ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        Args:
            segment_duration: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            max_size_mb: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô MB
            quality_preset: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
        """
        video_files = self.get_video_files()
        
        if not video_files:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {self.input_folder}")
            return {'processed': 0, 'failed': 0, 'total': 0}
        
        print("üé¨ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        print("=" * 60)
        print(f"üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå input: {self.input_folder}")
        print(f"üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output: {self.output_folder}")
        print(f"üìπ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {len(video_files)} ‡πÑ‡∏ü‡∏•‡πå")
        print(f"‚öôÔ∏è  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
        print(f"   - ‡∏ï‡∏±‡∏î‡∏ó‡∏∏‡∏Å {segment_duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({self.format_time(segment_duration)})")
        print(f"   - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_size_mb} MB ‡∏ï‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå")
        print(f"   - ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {quality_preset}")
        print("=" * 60)
        
        processed_count = 0
        failed_count = 0
        total_start_time = time.time()
        
        for idx, video_file in enumerate(video_files, 1):
            print(f"\nüéØ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà {idx}/{len(video_files)}: {os.path.basename(video_file)}")
            
            if self.split_and_compress_video(video_file, segment_duration, max_size_mb, quality_preset):
                processed_count += 1
            else:
                failed_count += 1
        
        total_time = time.time() - total_start_time
        
        print("\n" + "=" * 60)
        print("üèÅ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("=" * 60)
        print(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {processed_count} ‡πÑ‡∏ü‡∏•‡πå")
        print(f"‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {failed_count} ‡πÑ‡∏ü‡∏•‡πå")
        print(f"üìä ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(video_files)} ‡πÑ‡∏ü‡∏•‡πå")
        print(f"‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°: {self.format_time(total_time)}")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {self.output_folder}")
        
        return {
            'processed': processed_count,
            'failed': failed_count,
            'total': len(video_files),
            'time_taken': total_time
        }

def main():
    parser = argparse.ArgumentParser(description='‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ FFmpeg')
    parser.add_argument('-d', '--duration', type=int, default=300,
                       help='‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (default: 300)')
    parser.add_argument('-s', '--size', type=float, default=25,
                       help='‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô MB (default: 25)')
    parser.add_argument('-q', '--quality', choices=['ultrafast', 'fast', 'medium', 'slow', 'veryslow'],
                       default='medium', help='‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (default: medium)')
    parser.add_argument('-i', '--input', default='input_vdo',
                       help='‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå input (default: input_vdo)')
    parser.add_argument('-o', '--output', default='output_vdo',
                       help='‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output (default: output_vdo)')
    parser.add_argument('--interactive', action='store_true',
                       help='‡πÇ‡∏´‡∏°‡∏î‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö (‡∏ñ‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)')
    
    args = parser.parse_args()
    
    if args.interactive:
        print("üé¨ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡πÇ‡∏´‡∏°‡∏î‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö)")
        print("=" * 60)
        
        try:
            segment_duration = int(input(f"‚è±Ô∏è  ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) [default: {args.duration}]: ") or args.duration)
            max_size_mb = float(input(f"üì¶ ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (MB) [default: {args.size}]: ") or args.size)
            
            print("\nüéöÔ∏è  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™:")
            print("   1. ultrafast (‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥)")
            print("   2. fast (‡πÄ‡∏£‡πá‡∏ß)")
            print("   3. medium (‡∏õ‡∏Å‡∏ï‡∏¥) [default]")
            print("   4. slow (‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ)")
            print("   5. veryslow (‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)")
            
            quality_choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-5): ").strip()
            quality_map = {'1': 'ultrafast', '2': 'fast', '3': 'medium', '4': 'slow', '5': 'veryslow'}
            quality_preset = quality_map.get(quality_choice, args.quality)
            
        except ValueError:
            print("‚ùå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
            segment_duration = args.duration
            max_size_mb = args.size
            quality_preset = args.quality
    else:
        segment_duration = args.duration
        max_size_mb = args.size
        quality_preset = args.quality
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á processor ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        processor = VideoProcessor(input_folder=args.input, output_folder=args.output)
        result = processor.process_all_videos(segment_duration, max_size_mb, quality_preset)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        summary_file = os.path.join(args.output, 'processing_summary.json')
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'settings': {
                    'segment_duration': segment_duration,
                    'max_size_mb': max_size_mb,
                    'quality_preset': quality_preset,
                    'input_folder': args.input,
                    'output_folder': args.output
                },
                'results': result
            }, f, indent=2, ensure_ascii=False)
        
        print(f"üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {summary_file}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        raise

if __name__ == "__main__":
    main()
