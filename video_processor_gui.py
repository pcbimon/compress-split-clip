import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import os
import subprocess
import math
import time
from pathlib import Path
import json
from typing import Optional
import webbrowser

class VideoProcessorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üé¨ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        self.root.geometry("700x650")
        self.root.resizable(True, True)
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤
        self.source_file = tk.StringVar()
        self.output_folder = "output_vdo"
        self.file_size = tk.DoubleVar(value=25.0)
        self.duration_value = tk.IntVar(value=300)
        self.duration_unit = tk.StringVar(value="‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        self.quality_preset = tk.StringVar(value="medium")
        self.is_processing = False
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á output folder
        Path(self.output_folder).mkdir(exist_ok=True)
        
        self.setup_ui()
        self.check_ffmpeg()
    
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏´‡∏•‡∏±‡∏Å"""
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
        title_frame = ttk.Frame(self.root)
        title_frame.pack(fill="x", padx=10, pady=5)
        
        title_label = ttk.Label(title_frame, text="üé¨ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", 
                               font=("Arial", 16, "bold"))
        title_label.pack()
        
        # Frame ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        main_frame = ttk.LabelFrame(self.root, text="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", padding=10)
        main_frame.pack(fill="x", padx=10, pady=5)
        
        # 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        file_frame = ttk.Frame(main_frame)
        file_frame.pack(fill="x", pady=5)
        
        ttk.Label(file_frame, text="Select Source File:", font=("Arial", 10, "bold")).pack(anchor="w")
        
        file_select_frame = ttk.Frame(file_frame)
        file_select_frame.pack(fill="x", pady=2)
        
        self.file_entry = ttk.Entry(file_select_frame, textvariable=self.source_file, 
                                   font=("Arial", 9))
        self.file_entry.pack(side="left", fill="x", expand=True, padx=(0, 5))
        
        ttk.Button(file_select_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", 
                  command=self.select_file).pack(side="right")
        
        # 2. ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
        size_frame = ttk.Frame(main_frame)
        size_frame.pack(fill="x", pady=5)
        
        ttk.Label(size_frame, text="‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (MB):", font=("Arial", 10, "bold")).pack(anchor="w")
        
        size_input_frame = ttk.Frame(size_frame)
        size_input_frame.pack(fill="x", pady=2)
        
        size_spinbox = ttk.Spinbox(size_input_frame, from_=1, to=1000, 
                                  textvariable=self.file_size, width=10)
        size_spinbox.pack(side="left")
        
        ttk.Label(size_input_frame, text="MB").pack(side="left", padx=(5, 0))
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        size_preset_frame = ttk.Frame(size_input_frame)
        size_preset_frame.pack(side="right")
        
        ttk.Button(size_preset_frame, text="10 MB (SNS)", width=12,
                  command=lambda: self.file_size.set(10)).pack(side="left", padx=2)
        ttk.Button(size_preset_frame, text="25 MB (YouTube)", width=12,
                  command=lambda: self.file_size.set(25)).pack(side="left", padx=2)
        ttk.Button(size_preset_frame, text="100 MB (Archive)", width=12,
                  command=lambda: self.file_size.set(100)).pack(side="left", padx=2)
        
        # 3. ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á
        duration_frame = ttk.Frame(main_frame)
        duration_frame.pack(fill="x", pady=5)
        
        ttk.Label(duration_frame, text="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á:", font=("Arial", 10, "bold")).pack(anchor="w")
        
        duration_input_frame = ttk.Frame(duration_frame)
        duration_input_frame.pack(fill="x", pady=2)
        
        duration_spinbox = ttk.Spinbox(duration_input_frame, from_=1, to=3600, 
                                      textvariable=self.duration_value, width=10)
        duration_spinbox.pack(side="left")
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
        unit_combo = ttk.Combobox(duration_input_frame, textvariable=self.duration_unit,
                                 values=["‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", "‡∏ô‡∏≤‡∏ó‡∏µ"], state="readonly", width=8)
        unit_combo.pack(side="left", padx=(5, 0))
        unit_combo.bind("<<ComboboxSelected>>", self.on_unit_change)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        duration_preset_frame = ttk.Frame(duration_input_frame)
        duration_preset_frame.pack(side="right")
        
        ttk.Button(duration_preset_frame, text="30 ‡∏ß‡∏¥ (SNS)", width=12,
                  command=lambda: self.set_duration(30, "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")).pack(side="left", padx=2)
        ttk.Button(duration_preset_frame, text="5 ‡∏ô‡∏≤‡∏ó‡∏µ", width=12,
                  command=lambda: self.set_duration(5, "‡∏ô‡∏≤‡∏ó‡∏µ")).pack(side="left", padx=2)
        ttk.Button(duration_preset_frame, text="10 ‡∏ô‡∏≤‡∏ó‡∏µ", width=12,
                  command=lambda: self.set_duration(10, "‡∏ô‡∏≤‡∏ó‡∏µ")).pack(side="left", padx=2)
        
        # 4. ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        quality_frame = ttk.Frame(main_frame)
        quality_frame.pack(fill="x", pady=5)
        
        ttk.Label(quality_frame, text="‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™:", font=("Arial", 10, "bold")).pack(anchor="w")
        
        quality_input_frame = ttk.Frame(quality_frame)
        quality_input_frame.pack(fill="x", pady=2)
        
        quality_combo = ttk.Combobox(quality_input_frame, textvariable=self.quality_preset,
                                    values=["ultrafast", "fast", "medium", "slow", "veryslow"],
                                    state="readonly", width=15)
        quality_combo.pack(side="left")
        
        # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        quality_desc = {
            "ultrafast": "‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥",
            "fast": "‡πÄ‡∏£‡πá‡∏ß, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥", 
            "medium": "‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏™‡∏°‡∏î‡∏∏‡∏• (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)",
            "slow": "‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ",
            "veryslow": "‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
        }
        
        self.quality_desc_label = ttk.Label(quality_input_frame, 
                                           text=quality_desc[self.quality_preset.get()],
                                           foreground="gray")
        self.quality_desc_label.pack(side="left", padx=(10, 0))
        
        quality_combo.bind("<<ComboboxSelected>>", 
                          lambda e: self.quality_desc_label.config(
                              text=quality_desc[self.quality_preset.get()]))
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        button_frame = ttk.Frame(self.root)
        button_frame.pack(fill="x", padx=10, pady=10)
        
        self.process_button = ttk.Button(button_frame, text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", 
                                        command=self.start_processing)
        self.process_button.pack(side="left", padx=(0, 5))
        
        self.stop_button = ttk.Button(button_frame, text="‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î", 
                                     command=self.stop_processing, state="disabled")
        self.stop_button.pack(side="left", padx=5)
        
        ttk.Button(button_frame, text="üìÅ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output", 
                  command=self.open_output_folder).pack(side="right")
        
        # Progress bar
        progress_frame = ttk.Frame(self.root)
        progress_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Label(progress_frame, text="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤:").pack(anchor="w")
        self.progress = ttk.Progressbar(progress_frame, mode="indeterminate")
        self.progress.pack(fill="x", pady=2)
        
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (Log)
        log_frame = ttk.LabelFrame(self.root, text="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", padding=5)
        log_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=12, 
                                                 font=("Consolas", 9))
        self.log_text.pack(fill="both", expand=True)
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ FFmpeg
        self.status_label = ttk.Label(self.root, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö FFmpeg...", 
                                     foreground="orange")
        self.status_label.pack(anchor="w", padx=10, pady=2)
    
    def log(self, message):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô log"""
        timestamp = time.strftime("%H:%M:%S")
        self.log_text.insert("end", f"[{timestamp}] {message}\n")
        self.log_text.see("end")
        self.root.update_idletasks()
    
    def select_file(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
        filetypes = [
            ("‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", "*.mp4 *.avi *.mov *.mkv *.wmv *.flv *.webm *.m4v"),
            ("MP4 files", "*.mp4"),
            ("AVI files", "*.avi"),
            ("MOV files", "*.mov"),
            ("‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "*.*")
        ]
        
        filename = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
            filetypes=filetypes
        )
        
        if filename:
            self.source_file.set(filename)
            self.log(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå: {os.path.basename(filename)}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
            self.show_file_info(filename)
    
    def show_file_info(self, filename):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå"""
        try:
            file_size = os.path.getsize(filename) / (1024 * 1024)  # MB
            self.log(f"‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_size:.1f} MB")
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ FFmpeg ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            if hasattr(self, 'ffmpeg_available') and self.ffmpeg_available:
                self.get_video_duration(filename)
                
        except Exception as e:
            self.log(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
    
    def get_video_duration(self, filename):
        """‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
        try:
            cmd = [
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
                '-of', 'default=noprint_wrappers=1:nokey=1', filename
            ]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0 and result.stdout.strip():
                duration = float(result.stdout.strip())
                minutes = int(duration // 60)
                seconds = int(duration % 60)
                self.log(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {minutes:02d}:{seconds:02d} ‡∏ô‡∏≤‡∏ó‡∏µ")
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ
                segment_duration = self.get_duration_in_seconds()
                num_segments = math.ceil(duration / segment_duration)
                self.log(f"‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô: {num_segments} ‡∏™‡πà‡∏ß‡∏ô")
                
        except Exception as e:
            self.log(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ: {e}")
    
    def set_duration(self, value, unit):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤"""
        self.duration_value.set(value)
        self.duration_unit.set(unit)
        self.log(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {value} {unit}")
    
    def on_unit_change(self, event=None):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤"""
        current_value = self.duration_value.get()
        current_unit = self.duration_unit.get()
        self.log(f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô: {current_value} {current_unit}")
    
    def get_duration_in_seconds(self):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"""
        value = self.duration_value.get()
        unit = self.duration_unit.get()
        
        if unit == "‡∏ô‡∏≤‡∏ó‡∏µ":
            return value * 60
        else:  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            return value
    
    def check_ffmpeg(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö FFmpeg"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                self.ffmpeg_available = True
                self.status_label.config(text="‚úì FFmpeg ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", foreground="green")
                self.log("‚úì FFmpeg ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            else:
                self.ffmpeg_not_available()
        except Exception:
            self.ffmpeg_not_available()
    
    def ffmpeg_not_available(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö FFmpeg"""
        self.ffmpeg_available = False
        self.status_label.config(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö FFmpeg", foreground="red")
        self.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö FFmpeg")
        self.log("üì• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á FFmpeg ‡∏à‡∏≤‡∏Å https://ffmpeg.org/download.html")
        self.process_button.config(state="disabled")
    
    def validate_inputs(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô"""
        if not self.source_file.get():
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
            return False
        
        if not os.path.exists(self.source_file.get()):
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
            return False
        
        if not self.ffmpeg_available:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏û‡∏ö FFmpeg\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á FFmpeg ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return False
        
        if self.file_size.get() <= 0:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
            return False
        
        if self.duration_value.get() <= 0:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
            return False
        
        return True
    
    def start_processing(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        if not self.validate_inputs():
            return
        
        self.is_processing = True
        self.process_button.config(state="disabled")
        self.stop_button.config(state="normal")
        self.progress.start()
        
        # ‡∏•‡πâ‡∏≤‡∏á log
        self.log_text.delete("1.0", "end")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        self.process_thread = threading.Thread(target=self.process_video, daemon=True)
        self.process_thread.start()
    
    def stop_processing(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        self.is_processing = False
        self.log("‚èπÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
    
    def process_video(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡∏£‡∏±‡∏ô‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å)"""
        try:
            video_path = self.source_file.get()
            video_name = Path(video_path).stem
            segment_duration = self.get_duration_in_seconds()
            max_size_mb = self.file_size.get()
            quality_preset = self.quality_preset.get()
            
            self.log(f"üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {os.path.basename(video_path)}")
            self.log(f"‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
            self.log(f"   - ‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏∏‡∏Å {segment_duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            self.log(f"   - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_size_mb} MB")
            self.log(f"   - ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {quality_preset}")
            self.log("-" * 50)
            
            # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            video_info = self.get_video_info(video_path)
            total_duration = video_info['duration']
            
            if total_duration <= 0:
                self.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ")
                return
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô
            num_segments = math.ceil(total_duration / segment_duration)
            
            self.log(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠:")
            self.log(f"   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {self.format_time(total_duration)}")
            self.log(f"   - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {video_info['file_size_mb']:.1f} MB")
            self.log(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô: {num_segments}")
            self.log("-" * 50)
            
            success_count = 0
            
            for i in range(num_segments):
                if not self.is_processing:
                    self.log("‚èπÔ∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
                    break
                
                start_time = i * segment_duration
                actual_duration = min(segment_duration, total_duration - start_time)
                
                output_filename = f"{video_name}_part{i+1:03d}.mp4"
                output_path = os.path.join(self.output_folder, output_filename)
                
                self.log(f"üîÑ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {i+1}/{num_segments}: {output_filename}")
                
                if self.process_segment(video_path, output_path, start_time, 
                                      actual_duration, max_size_mb, quality_preset):
                    success_count += 1
                    self.log(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    self.log(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            
            self.log("-" * 50)
            self.log(f"üèÅ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {success_count}/{num_segments} ‡∏™‡πà‡∏ß‡∏ô")
            
            if success_count > 0:
                self.log(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô: {self.output_folder}")
                
                # ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output
                self.root.after(1000, self.open_output_folder)
            
        except Exception as e:
            self.log(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        finally:
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ UI
            self.root.after(0, self.processing_finished)
    
    def get_video_info(self, video_path):
        """‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
        try:
            # ‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
            duration_cmd = [
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
                '-of', 'default=noprint_wrappers=1:nokey=1', video_path
            ]
            duration_result = subprocess.run(duration_cmd, capture_output=True, 
                                           text=True, check=True, timeout=30)
            duration = float(duration_result.stdout.strip()) if duration_result.stdout.strip() else 0
            
            # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
            file_size = os.path.getsize(video_path)
            file_size_mb = file_size / (1024 * 1024)
            
            return {
                'duration': duration,
                'file_size_bytes': file_size,
                'file_size_mb': file_size_mb
            }
        except Exception as e:
            self.log(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
            return {'duration': 0, 'file_size_bytes': 0, 'file_size_mb': 0}
    
    def calculate_target_bitrate(self, duration_seconds, max_size_mb):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bitrate ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"""
        if duration_seconds <= 0:
            return 1000000
        
        max_size_bits = max_size_mb * 8 * 1024 * 1024
        target_bitrate = int(max_size_bits / duration_seconds)
        return max(int(target_bitrate * 0.75), 100000)  # ‡∏•‡∏î 25% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    
    def process_segment(self, video_path, output_path, start_time, duration, max_size_mb, quality_preset):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
        try:
            target_bitrate = self.calculate_target_bitrate(duration, max_size_mb)
            
            cmd = [
                'ffmpeg', '-y',
                '-i', video_path,
                '-ss', str(start_time),
                '-t', str(duration),
                '-c:v', 'libx264',
                '-b:v', f"{target_bitrate}",
                '-maxrate', f"{target_bitrate}",
                '-bufsize', f"{target_bitrate * 2}",
                '-c:a', 'aac',
                '-b:a', '128k',
                '-preset', quality_preset,
                '-movflags', '+faststart',
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, 
                                  check=True, timeout=300)  # timeout 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if os.path.exists(output_path):
                file_size_mb = os.path.getsize(output_path) / (1024 * 1024)
                self.log(f"   üì¶ ‡∏Ç‡∏ô‡∏≤‡∏î: {file_size_mb:.1f} MB")
                return True
            else:
                return False
                
        except subprocess.CalledProcessError as e:
            self.log(f"   ‚ùå FFmpeg error: {e}")
            return False
        except subprocess.TimeoutExpired:
            self.log(f"   ‚ùå Timeout")
            return False
        except Exception as e:
            self.log(f"   ‚ùå Error: {e}")
            return False
    
    def format_time(self, seconds):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô HH:MM:SS"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        return f"{hours:02d}:{minutes:02d}:{secs:02d}"
    
    def processing_finished(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        self.is_processing = False
        self.progress.stop()
        self.process_button.config(state="normal")
        self.stop_button.config(state="disabled")
    
    def open_output_folder(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output"""
        try:
            output_path = os.path.abspath(self.output_folder)
            if os.path.exists(output_path):
                os.startfile(output_path)  # Windows
                self.log(f"üìÅ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {output_path}")
            else:
                self.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output")
        except Exception as e:
            self.log(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: {e}")

def main():
    """‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    root = tk.Tk()
    app = VideoProcessorGUI(root)
    
    # ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    def on_closing():
        if app.is_processing:
            if messagebox.askokcancel("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", 
                                     "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
                app.is_processing = False
                root.destroy()
        else:
            root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()
